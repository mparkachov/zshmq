#!/usr/bin/env sh
ZSHMQ_EMBEDDED=1
ZSHMQ_VERSION=0.0.2

# shellcheck shell=sh disable=SC2016,SC2317
# [getoptions] License: Creative Commons Zero v1.0 Universal
getoptions() {
	_error="" _on=1 _no="" _export="" _plus="" _mode="" _alt="" _rest="" _def=""
	_flags="" _nflags="" _opts="" _help="" _abbr="" _cmds="" _init=@empty IFS=" "
	[ $# -lt 2 ] && set -- "${1:?No parser definition}" -
	[ "$2" = - ] && _def=getoptions_parse

	i="					"
	while eval "_${#i}() { echo \"$i\$@\"; }" && [ "$i" ]; do i=${i#?}; done

	quote() {
		q="$2'" r=""
		while [ "$q" ]; do r="$r${q%%\'*}'\''" && q=${q#*\'}; done
		q="'${r%????}'" && q=${q#\'\'} && q=${q%\'\'}
		eval "$1=\${q:-\"''\"}"
	}
	code() {
		[ "${1#:}" = "$1" ] && c=3 || c=4
		eval "[ ! \${$c:+x} ] || $2 \"\$$c\""
	}
	sw() { sw="$sw${sw:+|}$1"; }
	kv() { eval "${2-}${1%%:*}=\${1#*:}"; }
	loop() { [ $# -gt 1 ] && [ "$2" != -- ]; }

	invoke() { eval '"_$@"'; }
	prehook() { invoke "$@"; }
	for i in setup flag param option disp msg; do
		eval "$i() { prehook $i \"\$@\"; }"
	done

	args() {
		on=$_on no=$_no export=$_export init=$_init _hasarg=$1 && shift
		while loop "$@" && shift; do
			case $1 in
				-?) [ "$_hasarg" ] && _opts="$_opts${1#-}" || _flags="$_flags${1#-}" ;;
				+?) _plus=1 _nflags="$_nflags${1#+}" ;;
				[!-+]*) kv "$1"
			esac
		done
	}
	defvar() {
		case $init in
			@none) : ;;
			@export) code "$1" _0 "export $1" ;;
			@empty) code "$1" _0 "${export:+export }$1=''" ;;
			@unset) code "$1" _0 "unset $1 ||:" "unset OPTARG ||:; ${1#:}" ;;
			*)
				case $init in @*) eval "init=\"=\${${init#@}}\""; esac
				case $init in [!=]*) _0 "$init"; return 0; esac
				quote init "${init#=}"
				code "$1" _0 "${export:+export }$1=$init" "OPTARG=$init; ${1#:}"
		esac
	}
	_setup() {
		[ "${1#-}" ] && _rest=$1
		while loop "$@" && shift; do kv "$1" _; done
	}
	_flag() { args "" "$@"; defvar "$@"; }
	_param() { args 1 "$@"; defvar "$@"; }
	_option() { args 1 "$@"; defvar "$@"; }
	_disp() { args "" "$@"; }
	_msg() { args "" _ "$@"; }

	cmd() { _mode=@ _cmds="$_cmds${_cmds:+|}'$1'"; }
	"$@"
	cmd() { :; }
	_0 "${_rest:?}=''"

	_0 "${_def:-$2}() {"
	_1 'OPTIND=$(($#+1))'
	_1 "while OPTARG= && [ \"\${$_rest}\" != x ] && [ \$# -gt 0 ]; do"
	[ "$_abbr" ] && getoptions_abbr "$@"

	args() {
		sw="" validate="" pattern="" counter="" on=$_on no=$_no export=$_export
		while loop "$@" && shift; do
			case $1 in
				--\{no-\}*) i=${1#--?no-?}; sw "'--$i'|'--no-$i'" ;;
				--with\{out\}-*) i=${1#--*-}; sw "'--with-$i'|'--without-$i'" ;;
				[-+]? | --*) sw "'$1'" ;;
				*) kv "$1"
			esac
		done
		quote on "$on"
		quote no "$no"
	}
	setup() { :; }
	_flag() {
		args "$@"
		[ "$counter" ] && on=1 no=-1 v="\$((\${$1:-0}+\$OPTARG))" || v=""
		_3 "$sw)"
		_4 '[ "${OPTARG:-}" ] && OPTARG=${OPTARG#*\=} && set "noarg" "$1" && break'
		_4 "eval '[ \${OPTARG+x} ] &&:' && OPTARG=$on || OPTARG=$no"
		valid "$1" "${v:-\$OPTARG}"
		_4 ";;"
	}
	_param() {
		args "$@"
		_3 "$sw)"
		_4 '[ $# -le 1 ] && set "required" "$1" && break'
		_4 'OPTARG=$2'
		valid "$1" '$OPTARG'
		_4 "shift ;;"
	}
	_option() {
		args "$@"
		_3 "$sw)"
		_4 'set -- "$1" "$@"'
		_4 '[ ${OPTARG+x} ] && {'
		_5 'case $1 in --no-*|--without-*) set "noarg" "${1%%\=*}"; break; esac'
		_5 '[ "${OPTARG:-}" ] && { shift; OPTARG=$2; } ||' "OPTARG=$on"
		_4 "} || OPTARG=$no"
		valid "$1" '$OPTARG'
		_4 "shift ;;"
	}
	valid() {
		set -- "$validate" "$pattern" "$1" "$2"
		[ "$1" ] && _4 "$1 || { set -- ${1%% *}:\$? \"\$1\" $1; break; }"
		[ "$2" ] && {
			_4 "case \$OPTARG in $2) ;;"
			_5 '*) set "pattern:'"$2"'" "$1"; break'
			_4 "esac"
		}
		code "$3" _4 "${export:+export }$3=\"$4\"" "${3#:}"
	}
	_disp() {
		args "$@"
		_3 "$sw)"
		code "$1" _4 "echo \"\${$1}\"" "${1#:}"
		_4 "exit 0 ;;"
	}
	_msg() { :; }

	[ "$_alt" ] && _2 'case $1 in -[!-]?*) set -- "-$@"; esac'
	_2 'case $1 in'
	_wa() { _4 "eval 'set -- $1' \${1+'\"\$@\"'}"; }
	_op() {
		_3 "$1) OPTARG=\$1; shift"
		_wa '"${OPTARG%"${OPTARG#??}"}" '"$2"'"${OPTARG#??}"'
		_4 "${4:-}$3"
	}
	_3 '--?*=*) OPTARG=$1; shift'
	_wa '"${OPTARG%%\=*}" "${OPTARG#*\=}"'
	_4 ";;"
	_3 "--no-*|--without-*) unset OPTARG ;;"
	[ "$_alt" ] || {
		[ "$_opts" ] && _op "-[$_opts]?*" "" ";;"
		[ ! "$_flags" ] || _op "-[$_flags]?*" - "OPTARG= ;;" \
			'case $2 in --*) set -- "$1" unknown "$2" && '"$_rest=x; esac;"
	}
	[ "$_plus" ] && {
		[ "$_nflags" ] && _op "+[$_nflags]?*" + "unset OPTARG ;;"
		_3 "+*) unset OPTARG ;;"
	}
	_2 "esac"
	_2 'case $1 in'
	"$@"
	rest() {
		_4 'while [ $# -gt 0 ]; do'
		_5 "$_rest=\"\${$_rest}" '\"\${$(($OPTIND-$#))}\""'
		_5 "shift"
		_4 "done"
		_4 "break ;;"
	}
	_3 "--)"
	[ "$_mode" = @ ] || _4 "shift"
	rest
	_3 "[-${_plus:++}]?*)" 'set "unknown" "$1"; break ;;'
	_3 "*)"
	case $_mode in
		@)
			_4 "case \$1 in ${_cmds:-*}) ;;"
			_5 '*) set "notcmd" "$1"; break'
			_4 "esac"
			rest ;;
		+) rest ;;
		*) _4 "$_rest=\"\${$_rest}" '\"\${$(($OPTIND-$#))}\""'
	esac
	_2 "esac"
	_2 "shift"
	_1 "done"
	_1 '[ $# -eq 0 ] && { OPTIND=1; unset OPTARG; return 0; }'
	_1 'case $1 in'
	_2 'unknown) set "Unrecognized option: $2" "$@" ;;'
	_2 'noarg) set "Does not allow an argument: $2" "$@" ;;'
	_2 'required) set "Requires an argument: $2" "$@" ;;'
	_2 'pattern:*) set "Does not match the pattern (${1#*:}): $2" "$@" ;;'
	_2 'notcmd) set "Not a command: $2" "$@" ;;'
	_2 '*) set "Validation error ($1): $2" "$@"'
	_1 "esac"
	[ "$_error" ] && _1 "$_error" '"$@" >&2 || exit $?'
	_1 'echo "$1" >&2'
	_1 "exit 1"
	_0 "}"

	[ "$_help" ] && eval "shift 2; getoptions_help $1 $_help" ${3+'"$@"'}
	[ "$_def" ] && _0 "eval $_def \${1+'\"\$@\"'}; eval set -- \"\${$_rest}\""
	_0 "# Do not execute" # exit 1
}

# shellcheck shell=sh disable=SC2016,SC2317
# [getoptions_abbr] License: Creative Commons Zero v1.0 Universal
getoptions_abbr() {
	abbr() {
		_3 "case '$1' in"
		_4 '"$1") OPTARG=; break ;;'
		_4 '$1*) OPTARG="$OPTARG '"$1"'"'
		_3 "esac"
	}
	args() {
		abbr=1
		shift
		[ $# -gt 0 ] || return 0
		for i in "$@"; do
			case $i in
				--) break ;;
				[!-+]*) eval "${i%%:*}=\${i#*:}"
			esac
		done
		[ "$abbr" ] || return 0

		for i in "$@"; do
			case $i in
				--) break ;;
				--\{no-\}*) abbr "--${i#--\{no-\}}"; abbr "--no-${i#--\{no-\}}" ;;
				--*) abbr "$i"
			esac
		done
	}
	setup() { :; }
	for i in flag param option disp; do
		eval "_$i()" '{ args "$@"; }'
	done
	msg() { :; }
	_2 'set -- "${1%%\=*}" "${1#*\=}" "$@"'
	[ "$_alt" ] && _2 'case $1 in -[!-]?*) set -- "-$@"; esac'
	_2 'while [ ${#1} -gt 2 ]; do'
	_3 'case $1 in (*[!a-zA-Z0-9_-]*) break; esac'
	"$@"
	_3 "break"
	_2 "done"
	_2 'case ${OPTARG# } in'
	_3 "*\ *)"
	_4 'eval "set -- $OPTARG $1 $OPTARG"'
	_4 'OPTIND=$((($#+1)/2)) OPTARG=$1; shift'
	_4 'while [ $# -gt "$OPTIND" ]; do OPTARG="$OPTARG, $1"; shift; done'
	_4 'set "Ambiguous option: $1 (could be $OPTARG)" ambiguous "$@"'
	[ "$_error" ] && _4 "$_error" '"$@" >&2 || exit $?'
	_4 'echo "$1" >&2'
	_4 "exit 1 ;;"
	_3 "?*)"
	_4 '[ "$2" = "$3" ] || OPTARG="$OPTARG=$2"'
	_4 "shift 3; eval 'set -- \"\${OPTARG# }\"' \${1+'\"\$@\"'}; OPTARG= ;;"
	_3 "*) shift 2"
	_2 "esac"
}

# shellcheck shell=sh disable=SC2016,SC2317
# [getoptions_help] License: Creative Commons Zero v1.0 Universal
getoptions_help() {
	_width="30,12" _plus="" _leading="  "

	pad() { p=$2; while [ ${#p} -lt "$3" ]; do p="$p "; done; eval "$1=\$p"; }
	kv() { eval "${2-}${1%%:*}=\${1#*:}"; }
	sw() { pad sw "$sw${sw:+, }" "$1"; sw="$sw$2"; }

	args() {
		_type=$1 var=${2%% *} sw="" label="" hidden="" && shift 2
		while [ $# -gt 0 ] && i=$1 && shift && [ "$i" != -- ]; do
			case $i in
				--*) sw $((${_plus:+4}+4)) "$i" ;;
				-?) sw 0 "$i" ;;
				+?) [ ! "$_plus" ] || sw 4 "$i" ;;
				*) [ "$_type" = setup ] && kv "$i" _; kv "$i"
			esac
		done
		[ "$hidden" ] && return 0 || len=${_width%,*}

		[ "$label" ] || case $_type in
			setup | msg) label="" len=0 ;;
			flag | disp) label="$sw " ;;
			param) label="$sw $var " ;;
			option) label="${sw}[=$var] "
		esac
		[ "$_type" = cmd ] && label=${label:-$var } len=${_width#*,}
		pad label "${label:+$_leading}$label" "$len"
		[ ${#label} -le "$len" ] && [ $# -gt 0 ] && label="$label$1" && shift
		echo "$label"
		pad label "" "$len"
		[ $# -gt 0 ] || return 0
		for i in "$@"; do echo "$label$i"; done
	}

	for i in setup flag param option disp "msg -" cmd; do
		eval "${i% *}() { args $i \"\$@\"; }"
	done

	echo "$2() {"
	echo "cat<<'GETOPTIONSHERE'"
	"$@"
	echo "GETOPTIONSHERE"
	echo "}"
}

# shellcheck shell=sh

: ${ZSHMQ_COMMAND_REGISTRY:=}

zshmq_register_command() {
  cmd=$1
  case " ${ZSHMQ_COMMAND_REGISTRY} " in
    *" ${cmd} "*)
      :
      ;;
    *)
      if [ -n "${ZSHMQ_COMMAND_REGISTRY}" ]; then
        ZSHMQ_COMMAND_REGISTRY="${ZSHMQ_COMMAND_REGISTRY} ${cmd}"
      else
        ZSHMQ_COMMAND_REGISTRY="${cmd}"
      fi
      ;;
  esac
}

zshmq_command_file() {
  command=$1
  if [ -z "${ZSHMQ_ROOT:-}" ]; then
    return 1
  fi
  file="${ZSHMQ_ROOT}/lib/${command}.sh"
  if [ -f "$file" ]; then
    printf '%s\n' "$file"
    return 0
  fi
  return 1
}

zshmq_command_metadata() {
  command=$1
  key=$2
  file=$(zshmq_command_file "$command") || return 1
  sed -n "s/^[[:space:]]*# *@${key}:[[:space:]]*//p" "$file"
}

zshmq_registered_commands() {
  for cmd in $ZSHMQ_COMMAND_REGISTRY; do
    [ -n "$cmd" ] && printf '%s\n' "$cmd"
  done
}

zshmq_command_summary() {
  command=$1
  summary=$(zshmq_command_metadata "$command" summary | sed -n '1p')
  if [ -n "$summary" ]; then
    printf '%s\n' "$summary"
  else
    printf '%s\n' 'Undocumented command.'
  fi
}

zshmq_parser_defaults() {
  usage_text=${ZSHMQ_PARSER_USAGE:-"zshmq <command>"}
  setup REST help:usage -- "Usage: ${usage_text}" ''
  msg -- 'Options:'
  flag ZSHMQ_HELP -h --help -- 'Display command documentation and exit.'
}

zshmq_print_command_help() {
  command=$1
  usage=$(zshmq_command_metadata "$command" usage | sed -n '1p')
  if [ -z "$usage" ]; then
    usage="zshmq $command"
  fi

  printf 'Command: %s\n' "$command"
  printf 'Usage: %s\n' "$usage"
  printf '\n'

  description=$(zshmq_command_metadata "$command" description)
  if [ -n "$description" ]; then
    printf '%s\n' "$description"
    printf '\n'
  else
    summary=$(zshmq_command_metadata "$command" summary | sed -n '1p')
    if [ -n "$summary" ]; then
      printf '%s\n\n' "$summary"
    fi
  fi

  options=$(zshmq_command_metadata "$command" option)
  if [ -n "$options" ]; then
    printf 'Options:\n'
    zshmq_command_metadata "$command" option | while IFS= read -r line; do
      printf '  %s\n' "$line"
    done
  fi
}

zshmq_eval_parser() {
  command=$1
  parser_fn=$2
  shift 2
  ZSHMQ_PARSER_USAGE=$(zshmq_command_metadata "$command" usage | sed -n '1p')
  if [ -z "$ZSHMQ_PARSER_USAGE" ]; then
    ZSHMQ_PARSER_USAGE="zshmq $command"
  fi
  unset ZSHMQ_HELP ||:
  # shellcheck disable=SC2039
  eval "$(getoptions $parser_fn zshmq_parse_runner)" || return 1
  zshmq_parse_runner "$@"
  ZSHMQ_REST=$REST
  if [ "${ZSHMQ_HELP:-0}" = "1" ]; then
    zshmq_print_command_help "$command"
    return 2
  fi
  return 0
}

# shellcheck shell=sh

#/**
# ctx_new - Bootstrap the runtime directory used by zshmq commands.
# @usage: zshmq ctx_new [--path PATH]
# @summary: Bootstrap the runtime directory (default: /tmp/zshmq) and transport primitives.
# @description: Ensure the runtime root exists, reset the subscription state file, and recreate the main FIFO bus so other zshmq commands start from a clean slate.
# @option: -p, --path PATH    Target directory to initialise (defaults to $ZSHMQ_CTX_ROOT or /tmp/zshmq).
# @option: -h, --help         Display command documentation and exit.
#*/

ctx_new_parser_definition() {
  zshmq_parser_defaults
  param CTX_PATH -p --path -- 'Target directory to initialise'
}

ctx_new() {
  set -eu

  if ! command -v getoptions >/dev/null 2>&1; then
    if [ -z "${ZSHMQ_ROOT:-}" ]; then
      printf '%s\n' 'ctx_new: ZSHMQ_ROOT is not set' >&2
      return 1
    fi
    # Load getoptions library from the vendored dependency.
    # shellcheck disable=SC1090
    . "${ZSHMQ_ROOT}/vendor/getoptions/lib/getoptions_base.sh"
    # shellcheck disable=SC1090
    . "${ZSHMQ_ROOT}/vendor/getoptions/lib/getoptions_abbr.sh"
    # shellcheck disable=SC1090
    . "${ZSHMQ_ROOT}/vendor/getoptions/lib/getoptions_help.sh"
  fi

  set +e
  zshmq_eval_parser ctx_new ctx_new_parser_definition "$@"
  status=$?
  set -e

  case $status in
    0)
      eval "set -- $ZSHMQ_REST"
      ;;
    1)
      return 1
      ;;
    2)
      return 0
      ;;
  esac

  if [ $# -gt 0 ]; then
    printf 'ctx_new: unexpected argument -- %s\n' "$1" >&2
    return 1
  fi

  unset ZSHMQ_REST ||:

  target=${CTX_PATH:-${ZSHMQ_CTX_ROOT:-/tmp/zshmq}}

  if [ -z "$target" ]; then
    printf '%s\n' 'ctx_new: target path is empty' >&2
    return 1
  fi

  case $target in
    /|'')
      printf '%s\n' 'ctx_new: refusing to operate on root directory' >&2
      return 1
      ;;
  esac

  if [ ! -d "$target" ]; then
    mkdir -p "$target"
  fi

  runtime_root=${target%/}
  state_path=${ZSHMQ_STATE:-${runtime_root}/state}
  bus_path=${ZSHMQ_BUS:-${runtime_root}/bus}

  if [ -z "$state_path" ]; then
    printf '%s\n' 'ctx_new: state path is empty' >&2
    return 1
  fi

  if [ -z "$bus_path" ]; then
    printf '%s\n' 'ctx_new: bus path is empty' >&2
    return 1
  fi

  case $state_path in
    */*)
      state_dir=${state_path%/*}
      ;;
    *)
      state_dir=.
      ;;
  esac
  if [ "$state_dir" != "." ] && [ ! -d "$state_dir" ]; then
    mkdir -p "$state_dir"
  fi

  if [ -e "$state_path" ] && [ ! -f "$state_path" ]; then
    printf 'ctx_new: state path is not a regular file: %s\n' "$state_path" >&2
    return 1
  fi

  : > "$state_path"

  case $bus_path in
    */*)
      bus_dir=${bus_path%/*}
      ;;
    *)
      bus_dir=.
      ;;
  esac
  if [ "$bus_dir" != "." ] && [ ! -d "$bus_dir" ]; then
    mkdir -p "$bus_dir"
  fi

  if [ -e "$bus_path" ]; then
    if [ -p "$bus_path" ]; then
      rm -f "$bus_path"
    else
      printf 'ctx_new: bus path is not a FIFO: %s\n' "$bus_path" >&2
      return 1
    fi
  fi

  mkfifo "$bus_path"

  printf '%s\n' "$target"
}

if command -v zshmq_register_command >/dev/null 2>&1; then
  zshmq_register_command ctx_new
fi

# shellcheck shell=sh

#/**
# ctx_destroy - Remove the runtime directory created by ctx_new.
# @usage: zshmq ctx_destroy [--path PATH]
# @summary: Remove the runtime directory (default: /tmp/zshmq) and its runtime files.
# @description: Delete the bus FIFO and state file created by ctx_new and remove the runtime directory if it is now empty.
# @option: -p, --path PATH    Target directory to remove (defaults to $ZSHMQ_CTX_ROOT or /tmp/zshmq).
# @option: -h, --help         Display command documentation and exit.
#*/

ctx_destroy_parser_definition() {
  zshmq_parser_defaults
  param CTX_PATH -p --path -- 'Target directory to remove'
}

ctx_destroy() {
  set -eu

  if ! command -v getoptions >/dev/null 2>&1; then
    if [ -z "${ZSHMQ_ROOT:-}" ]; then
      printf '%s\n' 'ctx_destroy: ZSHMQ_ROOT is not set' >&2
      return 1
    fi
    # shellcheck disable=SC1090
    . "${ZSHMQ_ROOT}/vendor/getoptions/lib/getoptions_base.sh"
    # shellcheck disable=SC1090
    . "${ZSHMQ_ROOT}/vendor/getoptions/lib/getoptions_abbr.sh"
    # shellcheck disable=SC1090
    . "${ZSHMQ_ROOT}/vendor/getoptions/lib/getoptions_help.sh"
  fi

  set +e
  zshmq_eval_parser ctx_destroy ctx_destroy_parser_definition "$@"
  status=$?
  set -e

  case $status in
    0)
      eval "set -- $ZSHMQ_REST"
      ;;
    1)
      return 1
      ;;
    2)
      return 0
      ;;
  esac

  if [ $# -gt 0 ]; then
    printf 'ctx_destroy: unexpected argument -- %s\n' "$1" >&2
    return 1
  fi

  unset ZSHMQ_REST ||:

  target=${CTX_PATH:-${ZSHMQ_CTX_ROOT:-/tmp/zshmq}}

  if [ -z "$target" ]; then
    printf '%s\n' 'ctx_destroy: target path is empty' >&2
    return 1
  fi

  case $target in
    /|'')
      printf '%s\n' 'ctx_destroy: refusing to operate on root directory' >&2
      return 1
      ;;
  esac

  if [ -d "$target" ]; then
    runtime_root=${target%/}
    state_path=${ZSHMQ_STATE:-${runtime_root}/state}
    bus_path=${ZSHMQ_BUS:-${runtime_root}/bus}
    pid_path=${ZSHMQ_DISPATCH_PID:-${runtime_root}/dispatcher.pid}

    if [ -f "$state_path" ]; then
      rm -f "$state_path"
    fi
    if [ -p "$bus_path" ] || [ -f "$bus_path" ]; then
      rm -f "$bus_path"
    fi
    if [ -f "$pid_path" ]; then
      rm -f "$pid_path"
    fi
    remaining=$(find "$target" -mindepth 1 -maxdepth 1 -not -name '.' -not -name '..' -print -quit 2>/dev/null || :)
    if [ -z "${remaining:-}" ]; then
      rmdir "$target" 2>/dev/null || :
    fi
  fi

  printf '%s\n' "$target"
}

if command -v zshmq_register_command >/dev/null 2>&1; then
  zshmq_register_command ctx_destroy
fi

# shellcheck shell=sh

#/**
# start - Launch the dispatcher loop for zshmq.
# @usage: zshmq start [--path PATH]
# @summary: Launch the dispatcher (default root: /tmp/zshmq) in the background.
# @description: Validate an existing runtime directory created by ctx_new, then spawn the dispatcher loop so publishers and subscribers can communicate via the main FIFO bus.
# @option: -p, --path PATH    Runtime directory to initialise (defaults to $ZSHMQ_CTX_ROOT or /tmp/zshmq).
# @option: -h, --help         Display command documentation and exit.
#*/

start_parser_definition() {
  zshmq_parser_defaults
  param CTX_PATH -p --path -- 'Runtime directory to initialise'
}

zshmq_dispatch_loop() {
  bus_path=$1
  state_path=$2

  trap 'exec 3>&-; exit 0' INT TERM HUP

  # Keep the FIFO open even when no writers are connected.
  exec 3<>"$bus_path"

  while IFS= read -r line <&3; do
    case $line in
      SUB\|*)
        entry=${line#SUB|}
        if [ -n "$entry" ]; then
          [ -f "$state_path" ] || : > "$state_path"
          if ! grep -F -- "$entry" "$state_path" >/dev/null 2>&1; then
            printf '%s\n' "$entry" >> "$state_path"
          fi
        fi
        ;;
      UNSUB\|*)
        entry=${line#UNSUB|}
        if [ -n "$entry" ] && [ -f "$state_path" ]; then
          tmp_state="${state_path}.tmp.$$"
          : > "$tmp_state"
          while IFS= read -r state_line || [ -n "$state_line" ]; do
            [ "$state_line" = "$entry" ] && continue
            printf '%s\n' "$state_line" >> "$tmp_state"
          done < "$state_path"
          mv "$tmp_state" "$state_path"
        fi
        ;;
      PUB\|*)
        payload=${line#PUB|}
        topic=${payload%%|*}
        message=${payload#*|}
        if [ -f "$state_path" ] && [ -n "$topic" ]; then
          while IFS='|' read -r pattern fifo_path; do
            [ -n "$pattern" ] || continue
            [ -n "$fifo_path" ] || continue
            if printf '%s\n' "$topic" | grep -E -- "$pattern" >/dev/null 2>&1; then
              if [ -p "$fifo_path" ]; then
                { printf '%s\n' "$message"; } >> "$fifo_path" 2>/dev/null || :
              fi
            fi
          done < "$state_path"
        fi
        ;;
      *)
        :
        ;;
    esac
  done
}

start() {
  set -eu

  if ! command -v getoptions >/dev/null 2>&1; then
    if [ -z "${ZSHMQ_ROOT:-}" ]; then
      printf '%s\n' 'start: ZSHMQ_ROOT is not set' >&2
      return 1
    fi
    # shellcheck disable=SC1090
    . "${ZSHMQ_ROOT}/vendor/getoptions/lib/getoptions_base.sh"
    # shellcheck disable=SC1090
    . "${ZSHMQ_ROOT}/vendor/getoptions/lib/getoptions_abbr.sh"
    # shellcheck disable=SC1090
    . "${ZSHMQ_ROOT}/vendor/getoptions/lib/getoptions_help.sh"
  fi

  set +e
  zshmq_eval_parser start start_parser_definition "$@"
  status=$?
  set -e

  case $status in
    0)
      eval "set -- $ZSHMQ_REST"
      ;;
    1)
      return 1
      ;;
    2)
      return 0
      ;;
  esac

  if [ $# -gt 0 ]; then
    printf 'start: unexpected argument -- %s\n' "$1" >&2
    return 1
  fi

  unset ZSHMQ_REST ||:

  target=${CTX_PATH:-${ZSHMQ_CTX_ROOT:-/tmp/zshmq}}

  if [ -z "$target" ]; then
    printf '%s\n' 'start: target path is empty' >&2
    return 1
  fi

  case $target in
    /|'')
      printf '%s\n' 'start: refusing to operate on root directory' >&2
      return 1
      ;;
  esac

  runtime_root=${target%/}
  state_path=${ZSHMQ_STATE:-${runtime_root}/state}
  bus_path=${ZSHMQ_BUS:-${runtime_root}/bus}
  pid_path=${ZSHMQ_DISPATCH_PID:-${runtime_root}/dispatcher.pid}

  if [ ! -d "$target" ]; then
    printf 'start: runtime directory not found: %s\n' "$target" >&2
    return 1
  fi

  if [ ! -p "$bus_path" ]; then
    printf 'start: bus FIFO not found at %s\n' "$bus_path" >&2
    return 1
  fi

  if [ ! -f "$state_path" ]; then
    printf 'start: state file not found at %s\n' "$state_path" >&2
    return 1
  fi

  if [ -f "$pid_path" ]; then
    existing_pid=$(tr -d '\r\n' < "$pid_path" 2>/dev/null || :)
    if [ -n "$existing_pid" ] && kill -0 "$existing_pid" 2>/dev/null; then
      printf 'start: dispatcher already running (pid=%s)\n' "$existing_pid" >&2
      return 1
    fi
    rm -f "$pid_path"
  fi

  zshmq_dispatch_loop "$bus_path" "$state_path" &
  dispatcher_pid=$!
  printf '%s\n' "$dispatcher_pid" > "$pid_path"
  printf 'Dispatcher started (pid=%s)\n' "$dispatcher_pid"
}

if command -v zshmq_register_command >/dev/null 2>&1; then
  zshmq_register_command start
fi

# shellcheck shell=sh

#/**
# stop - Terminate the zshmq dispatcher loop.
# @usage: zshmq stop [--path PATH]
# @summary: Stop the dispatcher running for the given runtime directory (default: /tmp/zshmq).
# @description: Read the dispatcher PID from the runtime directory, send it SIGTERM, and remove the PID file once the dispatcher exits.
# @option: -p, --path PATH    Runtime directory to target (defaults to $ZSHMQ_CTX_ROOT or /tmp/zshmq).
# @option: -h, --help         Display command documentation and exit.
#*/

stop_parser_definition() {
  zshmq_parser_defaults
  param CTX_PATH -p --path -- 'Runtime directory to target'
}

stop() {
  set -eu

  if ! command -v getoptions >/dev/null 2>&1; then
    if [ -z "${ZSHMQ_ROOT:-}" ]; then
      printf '%s\n' 'stop: ZSHMQ_ROOT is not set' >&2
      return 1
    fi
    # shellcheck disable=SC1090
    . "${ZSHMQ_ROOT}/vendor/getoptions/lib/getoptions_base.sh"
    # shellcheck disable=SC1090
    . "${ZSHMQ_ROOT}/vendor/getoptions/lib/getoptions_abbr.sh"
    # shellcheck disable=SC1090
    . "${ZSHMQ_ROOT}/vendor/getoptions/lib/getoptions_help.sh"
  fi

  set +e
  zshmq_eval_parser stop stop_parser_definition "$@"
  status=$?
  set -e

  case $status in
    0)
      eval "set -- $ZSHMQ_REST"
      ;;
    1)
      return 1
      ;;
    2)
      return 0
      ;;
  esac

  if [ $# -gt 0 ]; then
    printf 'stop: unexpected argument -- %s\n' "$1" >&2
    return 1
  fi

  unset ZSHMQ_REST ||:

  target=${CTX_PATH:-${ZSHMQ_CTX_ROOT:-/tmp/zshmq}}

  if [ -z "$target" ]; then
    printf '%s\n' 'stop: target path is empty' >&2
    return 1
  fi

  case $target in
    /|'')
      printf '%s\n' 'stop: refusing to operate on root directory' >&2
      return 1
      ;;
  esac

  runtime_root=${target%/}
  pid_path=${ZSHMQ_DISPATCH_PID:-${runtime_root}/dispatcher.pid}

  if [ ! -f "$pid_path" ]; then
    printf '%s\n' 'Dispatcher is not running.'
    return 0
  fi

  dispatcher_pid=$(tr -d '\r\n' < "$pid_path" 2>/dev/null || :)
  if [ -z "$dispatcher_pid" ]; then
    rm -f "$pid_path"
    printf '%s\n' 'Dispatcher is not running.'
    return 0
  fi

  if ! kill -0 "$dispatcher_pid" 2>/dev/null; then
    rm -f "$pid_path"
    printf '%s\n' 'Dispatcher is not running.'
    return 0
  fi

  kill "$dispatcher_pid" 2>/dev/null || :

  for attempt in 1 2 3 4 5; do
    if ! kill -0 "$dispatcher_pid" 2>/dev/null; then
      break
    fi
    sleep 1
  done

  if kill -0 "$dispatcher_pid" 2>/dev/null; then
    printf 'stop: dispatcher (pid=%s) did not terminate\n' "$dispatcher_pid" >&2
    return 1
  fi

  rm -f "$pid_path"
  printf 'Dispatcher stopped (pid=%s)\n' "$dispatcher_pid"
}

if command -v zshmq_register_command >/dev/null 2>&1; then
  zshmq_register_command stop
fi

set -eu

script_dir=$(
  CDPATH= cd -- "$(dirname -- "$0")" && pwd
)
if [ -n "${ZSHMQ_EMBEDDED:-}" ]; then
  ZSHMQ_ROOT=${script_dir}
else
  ZSHMQ_ROOT=$(
    CDPATH= cd -- "${script_dir}/.." && pwd
  )
fi
export ZSHMQ_ROOT
export ZSHMQ_VERSION=${ZSHMQ_VERSION:-$( [ -f "${ZSHMQ_ROOT}/VERSION" ] && cat "${ZSHMQ_ROOT}/VERSION" || printf '%s\n' '0.0.1' )}

if [ -z "${ZSHMQ_EMBEDDED:-}" ]; then
  # Load getoptions once so command implementations can rely on it.
  # shellcheck disable=SC1090
  . "${ZSHMQ_ROOT}/vendor/getoptions/lib/getoptions_base.sh"
  # shellcheck disable=SC1090
  . "${ZSHMQ_ROOT}/vendor/getoptions/lib/getoptions_abbr.sh"
  # shellcheck disable=SC1090
  . "${ZSHMQ_ROOT}/vendor/getoptions/lib/getoptions_help.sh"
  # shellcheck disable=SC1091
  . "${ZSHMQ_ROOT}/lib/command_helpers.sh"

  # Load command implementations after helper definitions.
  # shellcheck disable=SC1091
  . "${ZSHMQ_ROOT}/lib/ctx_new.sh"
  # shellcheck disable=SC1091
  . "${ZSHMQ_ROOT}/lib/ctx_destroy.sh"
  # shellcheck disable=SC1091
  . "${ZSHMQ_ROOT}/lib/start.sh"
  # shellcheck disable=SC1091
  . "${ZSHMQ_ROOT}/lib/stop.sh"
fi

zshmq_command_list() {
  if [ -n "${ZSHMQ_COMMAND_REGISTRY:-}" ]; then
    zshmq_registered_commands
    return
  fi

  for path in "${ZSHMQ_ROOT}/lib"/*.sh; do
    [ -f "$path" ] || continue
    cmd=${path##*/}
    cmd=${cmd%.sh}
    [ "$cmd" = "command_helpers" ] && continue
    printf '%s\n' "$cmd"
  done
}

zshmq_show_command_help() {
  cmd=$1
  zshmq_command_file "$cmd" >/dev/null 2>&1 || {
    printf 'Unknown command: %s\n' "$cmd"
    return 1
  }
  zshmq_print_command_help "$cmd"
}

zshmq_show_help() {
  printf '%s\n' 'Zero Shell Message Queue (zshmq)'
  printf '%s\n' ''
  printf '%s\n' 'Usage: zshmq <command> [options]'
  printf '%s\n' ''
  printf '%s\n' 'Commands:'
  for cmd in $(zshmq_command_list); do
    summary=$(zshmq_command_summary "$cmd")
    printf '  %s - %s\n' "$cmd" "$summary"
  done
  printf '\n'
  printf '%s\n' 'Each command supports -h/--help for detailed usage.'
  printf '%s\n' 'Run `zshmq help <command>` or `zshmq <command> --help` for command-specific documentation.'
}

if [ $# -eq 0 ]; then
  zshmq_show_help
  exit 0
fi

command_name=$1
shift

case $command_name in
  -h|--help|help)
    if [ $# -eq 0 ]; then
      zshmq_show_help
    else
      help_target=$1
      zshmq_show_command_help "$help_target"
    fi
    exit 0
    ;;
  --version)
    printf '%s\n' "${ZSHMQ_VERSION:-0.0.0}"
    exit 0
    ;;
  ctx_new)
    ctx_new "$@"
    ;;
  ctx_destroy)
    ctx_destroy "$@"
    ;;
  start)
    start "$@"
    ;;
  stop)
    stop "$@"
    ;;
  *)
    printf 'zshmq: unknown command -- %s\n' "$command_name" >&2
    printf '%s\n' '' >&2
    zshmq_show_help >&2
    exit 1
    ;;
 esac
